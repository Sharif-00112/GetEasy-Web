# Generated by Django 3.2.6 on 2021-10-24 08:26

import ckeditor.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='Enter a service title')),
                ('subtitle', models.CharField(max_length=300, verbose_name='Short Title')),
                ('short_desc', models.TextField(help_text='Not more than 300 character', max_length=300, verbose_name='Short Description')),
                ('details', ckeditor.fields.RichTextField(verbose_name='Enter a details of your service')),
                ('required_doc', ckeditor.fields.RichTextField(verbose_name='Required Documents Information of this service')),
                ('packages', ckeditor.fields.RichTextField(verbose_name='Service Packages')),
                ('image', models.FileField(help_text='Only PNG, JPG, JPEG format supported', upload_to='services_images', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])], verbose_name='Service image')),
                ('home_shown', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=100, verbose_name='Is shown in home?')),
                ('service_sequence', models.IntegerField(unique=True, verbose_name='Services ordering integer')),
            ],
        ),
        migrations.CreateModel(
            name='GetService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=300, verbose_name='Enter Your name')),
                ('phone_no', models.CharField(max_length=300, verbose_name='Enter your phone number')),
                ('district', models.CharField(max_length=300, verbose_name='Enter your district')),
                ('message', models.TextField(blank=True, null=True, verbose_name='Enter your message (if any)')),
                ('ctime', models.DateTimeField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], max_length=100, verbose_name='Services Status')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='GetEasyApp.services', verbose_name='Select Service')),
            ],
        ),
        migrations.CreateModel(
            name='General',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_title', models.CharField(max_length=300, verbose_name='Main Title')),
                ('advertise_title', models.CharField(max_length=300, verbose_name='Advertisement Title')),
                ('short_about', models.TextField(help_text='Not more than 300 character', max_length=300, verbose_name='Site Short About')),
                ('long_about', ckeditor.fields.RichTextField(verbose_name='Site Long About')),
                ('terms', ckeditor.fields.RichTextField(verbose_name='Enter terms and conditions')),
                ('policy', ckeditor.fields.RichTextField(verbose_name='Enter policy')),
                ('image_field', models.FileField(help_text='Only PNG, JPG, JPEG format supported', upload_to='services_images', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])], verbose_name='Home Background hero image')),
                ('phone', models.CharField(max_length=20, verbose_name='Company official Mobile/ Phone number')),
                ('email', models.EmailField(max_length=254, verbose_name='Company official email')),
                ('address', models.CharField(max_length=300, verbose_name='Full Address ')),
                ('facebook_link', models.CharField(help_text="remove 'http://' before your web address, Example: example.com", max_length=300, verbose_name='Facebook Link ')),
                ('whatsapp_link', models.CharField(max_length=300, verbose_name='Whatsapp Link/Mobile number')),
                ('instagram_link', models.CharField(help_text="remove 'http://' before your web address, Example: example.com", max_length=300, verbose_name='Instagram Link')),
                ('linkedin_link', models.CharField(help_text="remove 'http://' before your web address, Example: example.com", max_length=300, verbose_name='Linkedin Link')),
                ('skype_link', models.CharField(help_text="remove 'http://' before your web address, Example: example.com", max_length=300, verbose_name='Skype Link')),
                ('last_author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('segment_general', models.BooleanField(help_text=' If segment is General then Select the box.', verbose_name='This is a General Segment ')),
                ('question', ckeditor.fields.RichTextField(verbose_name='Input Question')),
                ('answer', ckeditor.fields.RichTextField(verbose_name='Input Answer')),
                ('home_shown', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=100, verbose_name='Is shown in home?')),
                ('ctime', models.DateTimeField(auto_now=True)),
                ('segment', models.ForeignKey(blank=True, help_text='If segment is general then leave it blank', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='GetEasyApp.services', verbose_name='Select Segment')),
            ],
        ),
    ]
